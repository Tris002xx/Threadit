<div class="posts">
  <% posts.forEach((post) => { %> <% let upvoted = false; %> <% let downvoted =
  false; %> <% post.upvotes.forEach((voted) => { if (voted.userId === user.id) {
  upvoted = true; } }); %> <% post.downvotes.forEach((voted) => { if
  (voted.userId === user.id) { downvoted = true; } }); %>

  <div class="post">
    <a href="/api/post/<%=post.id%>" class="post-link">
      <div class="post-user">
        <div class="post-user-name pt-sans-caption-bold">
          @<%=post.user.username%>
        </div>
        <div class="post-time pt-sans-caption-bold">
          <%=`${post.createdAt}`%>
        </div>
      </div>

      <div class="post-content">
        <h2 class="post-title pt-sans-caption-bold"><%=post.title%></h2>
        <p class="post-text pt-sans-regular"><%=post.text%></p>
      </div>
    </a>

    <div class="post-interactions">
      <div class="post-user-icon up">
        <?xml version=" 1.0" encoding="UTF-8" ?>
        <svg
          class="default up <%= upvoted ? 'clicked' : '' %>"
          id="<%=post.id%>"
          width="32px"
          height="32px"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="#685454"
        >
          <path
            d="M16.4724 20H4.1C3.76863 20 3.5 19.7314 3.5 19.4V9.6C3.5 9.26863 3.76863 9 4.1 9H6.86762C7.57015 9 8.22116 8.6314 8.5826 8.02899L11.293 3.51161C11.8779 2.53688 13.2554 2.44422 13.9655 3.33186C14.3002 3.75025 14.4081 4.30635 14.2541 4.81956L13.2317 8.22759C13.1162 8.61256 13.4045 9 13.8064 9H18.3815C19.7002 9 20.658 10.254 20.311 11.5262L18.4019 18.5262C18.1646 19.3964 17.3743 20 16.4724 20Z"
            stroke="#685454"
            stroke-width="1.5"
            stroke-linecap="round"
          ></path>
          <path
            d="M7 20L7 9"
            stroke="#685454"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path>
        </svg>
      </div>
      <p class="post-upvotes pt-sans-caption-regular">
        <%=post.upvotes.length%>
      </p>

      <div class="post-user-icon down">
        <?xml version=" 1.0" encoding="UTF-8" ?>
        <svg
          class="default down <%= downvoted ? 'clicked' : '' %>"
          id="<%=post.id%>"
          width="32px"
          height="32px"
          stroke-width="1.5"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          color="#685454"
        >
          <path
            d="M16.4724 3.5H4.1C3.76863 3.5 3.5 3.76863 3.5 4.1V13.9C3.5 14.2314 3.76863 14.5 4.1 14.5H6.86762C7.57015 14.5 8.22116 14.8686 8.5826 15.471L11.293 19.9884C11.8779 20.9631 13.2554 21.0558 13.9655 20.1681C14.3002 19.7497 14.4081 19.1937 14.2541 18.6804L13.2317 15.2724C13.1162 14.8874 13.4045 14.5 13.8064 14.5H18.3815C19.7002 14.5 20.658 13.246 20.311 11.9738L18.4019 4.97376C18.1646 4.10364 17.3743 3.5 16.4724 3.5Z"
            stroke="#685454"
            stroke-width="1.5"
            stroke-linecap="round"
          ></path>
          <path
            d="M7 14.5L7 3.5"
            stroke="#685454"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path>
        </svg>
      </div>
      <p class="post-downvotes pt-sans-caption-regular">
        <%=post.downvotes.length%>
      </p>
    </div>
  </div>
  <% }); %>
</div>

<% if (user) { %>
<script>
  document.querySelectorAll(".post-user-icon").forEach((icon) => {
    icon.addEventListener("click", (e) => {
      if (e.target.outerHTML.includes("svg")) {
        const postId = e.target.id;
        const isUpvote = e.target.classList.contains("up");
        const isDownvote = e.target.classList.contains("down");
        const oppositeVoteClass = isUpvote ? "down" : "up";
        const oppositeVoteElement =
          e.target.parentNode.parentNode.querySelector(
            `.default.${oppositeVoteClass}`
          );
        const isOppositeVoteClicked =
          oppositeVoteElement.classList.contains("clicked");

        let method = "POST";
        let operation = 1;

        if (e.target.classList.contains("clicked")) {
          method = "DELETE";
          operation = -1;
        }

        // If the opposite vote is clicked, remove it first
        if (isOppositeVoteClicked) {
          fetch(`/api/post/vote/${postId}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              vote: oppositeVoteClass,
            }),
          });

          oppositeVoteElement.classList.toggle("clicked");
          oppositeVoteElement.parentNode.nextElementSibling.innerText =
            parseInt(
              oppositeVoteElement.parentNode.nextElementSibling.innerText
            ) - 1;
        }

        // Add or remove the current vote
        fetch(`/api/post/vote/${postId}`, {
          method: method,
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            vote: isUpvote ? "up" : "down",
          }),
        });

        e.target.classList.toggle("clicked");
        e.target.parentNode.nextElementSibling.innerText =
          parseInt(e.target.parentNode.nextElementSibling.innerText) +
          operation;
      }
    });
  });
</script>
<% } %>
